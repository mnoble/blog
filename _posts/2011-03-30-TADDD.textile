---
layout: post
title: Test and Design Driven Development
date: 2011-03-30
---

For quite some time the way I've worked was to develop the application as if the interface didn't matter, until it was done. Write my features, tests, etc and then when you have a functioning 1.0, slap some pretty on it. It always felt wrong, it felt unfair to the application.

"Outside-In Development":http://rubylearning.com/blog/2010/10/05/outside-in-development/ is pretty awesome but while it ends up being great for features and application code, it didn't seem right for mixing in some design work. I've altered the my general, outside-in, workflow to include some design time. Here's how it goes..

h3. Cucumber

Write a feature; keep it high level and based on value (you already know this though). Lets say you're working on the Authentication portion of your application. You want to make sure when a user signs in, they are greeted with the message "Hey there!".

h3. RSpec, MiniTest, etc.

Write some controller and model tests to get rolling with the lower level login stuff. Let's pretend you just did that. A user can sign in and they will in fact see "Hey there!". That's awesome, nice work. Except...

!/public/images/taddd/crap-login.jpg(ugly login screen)!

Gross. You could leave it like this for the time being and move on to other features if you so incline. I, however, can not do that anymore. Having a functioning app with a lame UI sounds as bad as having no app at all to me.

h3. Design

At this point, it's time to put a little shine on your application. If you're not doing both design and development you could probably even "get lean" here and send a "card" downstream to a designer. Hmm, <code>article_ideas += 1</code>.

Anyway, now that we know we have a reliable test suite for this feature, start playing with the UI. With all the cool things available these days like SASS, Compass, Haml, etc. this step should be fast and easy, even without Photoshop.

!/public/images/taddd/nice-login.jpg(pretty login screen)!

So now you have a well tested, functional and quite attractive sign in feature. The cool thing about this approach is that it integrates really well with the normal red, green, refactor methodology. This won't be the last sign in feature you write, most likely, so every new one is a chance to not only refactor your code, but also the design.

So if you're a designer/developer hybrid or are tasked to doing both, try this out. It's helped me get that abstract vision for things into a clearer light, which is always a good thing.

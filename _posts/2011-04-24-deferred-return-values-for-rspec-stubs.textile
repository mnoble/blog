---
layout: post
title: RSpec Stubbing with Defered Return Values
date: 2011-04-24
---

While working on "Tabby":http://github.com/mnoble/tabby I hit an issue when stubbing Tempfile.new. Instead of creating a Tempfile I wanted to just use a StringIO-ish (<code>FakeFile</code>) object so I didn't write to the filesystem.

h3. The Problem

{% uv ruby %}
Tempfile.stub(:new).and_return(FakeFile.new)
{% enduv %}

The problem is that Tabby creates a new Tempfile for every tab it needs to make, meaning it can be multiple times depending on the setup.

So one of the setups in my tests has two tabs. For the first tab, my FakeFile object was opened, written to and closed. The next tab did the same, to that same exact FakeFile instance. Since it was already closed, I got <code>IOError: not opened for writing</code>. Lame.

h3. The Solution

RSpec's <code>and_returns</code> takes a block, that is evaluated when the stubbed method is called. This way it's invoked from a different context each time, giving us a brand new FakeFile each time.

{% uv ruby %}
Tempfile.stub(:new).and_return { FakeFile.new }
{% enduv %}

So if you have a stub that needs to return the same type of object, but a brand spank'n new instance of it each time, use a block.